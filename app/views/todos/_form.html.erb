<%= form_for(@todo, html: { class: "form-horizontal", role: "form" }) do |f| %>
  <% if @todo.errors.any? %>
    <div class="alert alert-danger alert-dismissable" role="alert">
      <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
      <h4><%= pluralize(@todo.errors.count, "error") %> prohibited this todo from being saved:</h4>

      <ul>
      <% @todo.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="form-group">
    <%= f.label :title, class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.text_field :title, class: "form-control" %>
    </div>
  </div>
  <div class="form-group">
    <%= f.label :due_date, class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.date_field :due_date, class: "form-control" %>
    </div>
  </div>
 <!--  <div class="form-group">
    <%= f.label :completed, class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.check_box :completed, class: "form-control" %>
    </div>
  </div> -->
  <div class="form-group">
    <%= f.label :assignee, class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
  <%= f.collection_select :assignee_id, Assignee.all, :id, :name, :prompt => true %>
    </div>
  </div>
<!--   <div class="form-group">
    <%= f.label :assigned, class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.check_box :assigned, class: "form-control" %>
    </div>
  </div> -->
  <div class="form-group">
    <%= f.label :pac_input, class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.text_field :business_name, id: "autocomplete", class: "form-control" %>
    </div>
  </div>
  <div class="form-group">
    <%= f.label :address, class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.text_field :address, class: "form-control" %>
    </div>
  </div>
  <div class="form-group">
    <%= f.label :city, class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.text_field :city, class: "form-control" %>
    </div>
  </div>
  <div class="form-group">
    <%= f.label :state, class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.text_field :state, class: "form-control" %>
    </div>
  </div>
  <div class="form-group">
    <%= f.label :zip, class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.number_field :zip, class: "form-control" %>
    </div>
  </div>
  <%= f.hidden_field :what, value: "todo" %>
   

  <div class="form-group">
    <div class="col-sm-offset-2 col-sm-10">
      <%= f.submit class: "btn btn-primary" %>
    </div>
  </div>
<% end %>

<form class="row" role="search">
        <div class="form-group col-md-12">
          <input type="text" id="pac-input" class="form-control" placeholder="Search">
        </div>
      </form>


<div id="map" style='width: 800px; height: 400px;'></div>

<script>
// Note: This example requires that you consent to location sharing when
// prompted by your browser. If you see the error "The Geolocation service
// failed.", it means you probably did not give permission for the browser to
// locate you.

  function initMap() {
    var pos;
    var mapOptions = {
      center: pos,
      zoom: 15,
      styles: [{"featureType":"administrative","elementType":"labels.text.fill","stylers":[{"color":"#444444"}]},{"featureType":"landscape","elementType":"all","stylers":[{"color":"#f2f2f2"}]},{"featureType":"poi","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"poi.park","elementType":"all","stylers":[{"visibility":"on"}]},{"featureType":"road","elementType":"all","stylers":[{"saturation":-100},{"lightness":45}]},{"featureType":"road.highway","elementType":"all","stylers":[{"visibility":"simplified"}]},{"featureType":"road.arterial","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"transit","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"transit.line","elementType":"geometry","stylers":[{"visibility":"on"}]},{"featureType":"transit.station.airport","elementType":"all","stylers":[{"visibility":"on"}]},{"featureType":"transit.station.airport","elementType":"geometry","stylers":[{"visibility":"on"}]},{"featureType":"transit.station.bus","elementType":"all","stylers":[{"visibility":"on"}]},{"featureType":"transit.station.bus","elementType":"geometry","stylers":[{"visibility":"on"}]},{"featureType":"transit.station.rail","elementType":"all","stylers":[{"visibility":"on"}]},{"featureType":"transit.station.rail","elementType":"geometry","stylers":[{"visibility":"on"}]},{"featureType":"water","elementType":"all","stylers":[{"color":"#6e769e"},{"visibility":"on"}]}]
    };

    var map = new google.maps.Map(document.getElementById('map'), mapOptions);

    var input = /** @type {HTMLInputElement} */(
      document.getElementById('pac-input'));

    // Create the autocomplete helper, and associate it with
  // an HTML text input box.
      var autocomplete = new google.maps.places.Autocomplete(input);

      autocomplete.bindTo('bounds', map);

      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

      var infowindow = new google.maps.InfoWindow();
      var marker = new google.maps.Marker({
        map: map
      });
      google.maps.event.addListener(marker, 'click', function() {
        infowindow.open(map, marker);
      });

      // Get the full place details when the user selects a place from the
      // list of suggestions.
      google.maps.event.addListener(autocomplete, 'place_changed', function() {
        infowindow.close();
        var place = autocomplete.getPlace();
        if (!place.geometry) {
          return;
        }

        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
        } else {
          map.setCenter(place.geometry.location);
          map.setZoom(15);
        }

        // Set the position of the marker using the place ID and location.
        marker.setPlace(/** @type {!google.maps.Place} */ ({
          placeId: place.place_id,
          location: place.geometry.location
        }));
        marker.setVisible(true);

        infowindow.setContent('<div style="color:black"><strong>' + place.name + '</strong><br>' +
            'Place ID: ' + place.place_id + '<br>' +
            place.formatted_address + '</div>');
        infowindow.open(map, marker);
      });

   
    var infoWindowCurrent = new google.maps.InfoWindow({map: map});
    // Try HTML5 geolocation.
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };

        infoWindowCurrent.setPosition(pos);
        infoWindowCurrent.setContent("<div style = 'width:75px;min-height:10px;color:black'>You are Here</div>");
        map.setCenter(pos);
      }, function() {
        handleLocationError(true, infoWindowCurrent, map.getCenter());
      });
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindowCurrent, map.getCenter());
    }

    console.log(pos);
  } //end of initMap function

  function handleLocationError(browserHasGeolocation, infoWindow, pos) {
    infoWindow.setPosition(pos);
    infoWindow.setContent(browserHasGeolocation ?
                          'Error: The Geolocation service failed.' :
                          'Error: Your browser doesn\'t support geolocation.');
  }





</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBMxa7ucqwX08z6wLjiuAj_YdCtTnXjWYY&signed_in=true&callback=initMap&libraries=places"
  async defer>
</script>
